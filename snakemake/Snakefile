# This pipeline can be run for different types of analysis (tumor subtypes, tumor vs tumor...) 
# Based on the specification in the config file

# Get absolute position of current file 
import os
pwd = os.popen('pwd').read()

configfile: "config.yaml"

# Select outputs expected by rule all, based on config
outputs = list()
if config["tumor_subtypes"]:
    outputs.append('''PUT HERE FINAL OUTPUT OF TUMOR SUBTYPES SUB-PIPELINE''')
if config["tumor_vs_tumor"]:
    outputs.append(config["output"]+"/tumor_vs_tumor/covariates"),
    outputs.append(config["output"]+"/tumor_vs_tumor/phenotypes"),
    outputs.append(expand(config["output"]+"/tumor_vs_tumor/plink_results/chr{chr}/chr{chr}_{phenotype}_{model}_done.txt", chr=range(1,23), model=config["model"], phenotype=config["cancer_types" ]))
if config["pathway_alteration"]:
    output.append('''PUT HERE FINAL OUTPUT OF PATHWAY ALTERATION SUB-PIPELINE ''')

rule all:
    input:
        outputs


#===================================================#
#   TUMOR SUBTYPES                                  #
#                                                   #
#   Within each tumor, run associations for each    #
#   tumor subtype against all the other subtypes    #
#   of the same tumor type                          #
#===================================================#

# Takes matrices of mutated sequences and generates vcf for plink association 
rule make_vcf_ts:
    input:
        ESM_input = config["data_folder"]+"/{cancer_type}/ESM_inputs/",
        mutated_sequences = config["data_folder"]+"/{cancer_type}/mutated_sequences/aa/"
    output:
        vcf = config["output"]+"/{cancer_type}/vcf/{cancer_type}_haplotype.vcf"
    script:
        "../scripts/tumor_subtypes/haplotype_vcf.R"

# Turn the vcf into a suitable file format for plink2
rule make_pfiles_ts:
    input:
        rules.make_vcf_ts.output
    output:
        config["output"]+"/{cancer_type}/pfiles/{cancer_type}"
    shell:
        '''/shares/CIBIO-Storage/BCG/scratch1/Tools/plink2.0/plink2 \
            --vcf {input} \
            --make-pgen \
            --out {output} \
            --vcf-half-call m
        '''

# Given the vcf just produced, generate covariates and phenotypes file for the samples present in the 
# vcf
rule make_cov_pheno_ts:
    input:
        vcf = rules.make_vcf_ts.output
    output:
        cov = config["output"]+"/{cancer_type}/cov/covariates",
        pheno = config["output"]+"/{cancer_type}/pheno/phenotypes"
    script:
        "../scripts/make_covariates_pheno.R"


#===================================================#
#   TUMOR VS TUMOR                                  #
#                                                   #
#   Run association on each tumor type against all  #
#   the other tumor types                           #
#===================================================#

# Generate unique ID for each haplotype
# This rule generate one job, independently from the number of tumors, that runs in 
# parallel with a number of cores specified in params@cores
rule haplotype_ID:
    params:
        cores = config["haplotype_ID_cores"],
        abs_path = pwd
    output:
        IDs = config["output"]+"/tumor_vs_tumor/haplotypes_IDs.csv"
    script:
        "../scripts/tumor_vs_tumor/haplotype_ID.R"

# Takes matrices of mutated sequences and generates one vcf per chromosome for plink association 
rule make_vcf_tt:
    input:
        IDs = rules.haplotype_ID.output.IDs
    output:
        vcf = config["output"]+"/tumor_vs_tumor/vcf_files/chr{chr}_haplotype.vcf"
    conda:
        "envs/Renv.yaml"
    params:
        abs_path = pwd,
        cores = config["make_vcf_tt_cores"]
    script:
        "../scripts/tumor_vs_tumor/haplotype_vcf.R"

# Turn the vcf into a suitable file format for plink2
rule make_pfiles_tt:
    input:
        rules.make_vcf_tt.output.vcf
    output:
        pgen = config["output"]+"/tumor_vs_tumor/pfiles/chr{chr}/haplotypes.pgen"
    shell:
        config["plink2"]+" \\"+
            "--vcf {input} \\"+
            "--make-pgen \\"+
            "--out "+config["output"]+"/tumor_vs_tumor/pfiles/chr{wildcards.chr}/haplotypes \\"+
            "--vcf-half-call m && touch {output}"
        
# make covariates and phenotype files for Plink
rule make_cov_pheno_tt:
    input:
        vcf = config["output"]+"/tumor_vs_tumor/vcf_files/chr22_haplotype.vcf",
        clinical_data = config["clinical_data"],
        PCs = config["PCs"]
    params:
        tumor_list = config["cancer_types"]
    output:
        cov = config["output"]+"/tumor_vs_tumor/covariates",
        pheno = config["output"]+"/tumor_vs_tumor/phenotypes"
    script:
        "../scripts/tumor_vs_tumor/make_covariates_pheno.R"

rule run_plink:
    input:
        pgen = config["output"]+"/tumor_vs_tumor/pfiles/chr{chr}/haplotypes.pgen",
        cov = rules.make_cov_pheno_tt.output.cov,
        pheno = rules.make_cov_pheno_tt.output.pheno
    params:
        cores = config["plink_glm_cores"]
    output:
        temp(config["output"]+"/tumor_vs_tumor/plink_results/chr{chr}/chr{chr}_{phenotype}_{model}_done.txt")
    shell:
        config["plink2"]+
            " --pfile "+config["output"]+"/tumor_vs_tumor/pfiles/chr{wildcards.chr}/haplotypes"+
            " --pheno {input.pheno}" +
            " --pheno-name {wildcards.phenotype}"
            " --covar {input.cov}" +
            " --glm {wildcards.model} hide-covar" +
            " --covar-variance-standardize" +
            " --1" +
            " --maf 0.01" +
            " --threads {params.cores}" +
            " --out " + config["output"] + "/tumor_vs_tumor/plink_results/chr{wildcards.chr}/{wildcards.model}" +
            " && touch {output}"